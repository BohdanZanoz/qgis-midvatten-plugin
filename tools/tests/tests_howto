
#This howto is not complete as there usually are more requiremets. It's usually easier to start with a test that already works and copy that one.


Mocking QgsProjectInstance:
#----------------------------
#Add a tuple with the requested values from definitions.midvatten_defs.settingsdict as key and the return value as value
MIDV_DICT = lambda x, y: {('Midvatten', 'database'): [TEMP_DB_PATH], ('Midvatten', 'locale'): [u'sv_SE']}[(x, y)]

class ATestClass():
    @mock.patch('midvatten_utils.QgsProject.instance')
    def atest(self, mock_qgsproject_instance):
        mock_qgsproject_instance.return_value.readEntry = MIDV_DICT


#Mock answers from import_data_to_db.utils.askuser:
#----------------------------
@mock.patch('import_data_to_db.utils.askuser')
def x(mock_askuser):
    def side_effect(*args, **kwargs):
        mock_result = mock.MagicMock()
        if args[1].startswith(u'Do you want to confirm'):
            mock_result.result = 0
            return mock_result
            #mock_askuser.return_value.result.return_value = 0
        elif args[1].startswith(u'Do you want to import all'):
            mock_result.result = 0
            return mock_result
        elif args[1].startswith(u'Please note!\nForeign keys'):
            mock_result.result = 1
            return mock_result
        elif args[1].startswith(u'Please note!\nThere are'):
            mock_result.result = 1
            return mock_result
        elif args[1].startswith(u'It is a strong recommendation'):
            mock_result.result = 0
            return mock_result
    mock_askuser.side_effect = side_effect